@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using NetCommons.Models
@using NetCommons.Database

@inject UserManager<UserAccount> UserManager
@inject SignInManager<UserAccount> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject HomeCoreDbCtx DbCtx;

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.RoleId" class="form-control" aria-required="true">
                    @foreach (var auth in Authorities)
                    {
                        <option value="@auth.Id">@auth.RoleName</option>
                    }
                </InputSelect>
                <label for="authority">Role</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private UserAccount user = default!;
    private string? username;
    private string? phoneNumber;
    private RoleAuthority[] Authorities = [];

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {   
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Authorities = GetAuthorities(user.MaxAuthority?.AuthLevel ?? -1);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private RoleAuthority[] GetAuthorities(int maxAuthId)
    {
        List<RoleAuthority> auths = DbCtx.AuthRoles.ToList();
        var maxAuth = auths.First(x => x.Id == maxAuthId).AuthLevel;
        var ret = auths.OrderByDescending(x => x.AuthLevel).Where(x => x.AuthLevel >= maxAuth).ToArray();
        return ret;
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Display(Name = "Authorized Role")]
        public int RoleId { get; set; } = -1;
    }
}
