@page "/Account/SystemSetup"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations;
@using NetCommons.Models
@using NetCommons.Database
@using NetCommons.HwDevice

@inject ILogger<SystemInitRegistration> Logger
@inject IUserStore<UserAccount> UserStore
@inject UserManager<UserAccount> UserManager
@inject IdentityRedirectManager RedirectManager
@inject HomeCoreDbCtx DbCtx;
@inject SystemState SysState;

<title>HomeNet Setup</title>

<h1>HomeNet Setup</h1>
<StatusMessage Message="@statusMessage" />

<div class="row">
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" 
    method="post" OnValidSubmit="RegisterUser" FormName="register">


    </EditForm>

        
</div>

@code {
    private string? statusMessage;

    private InputModel Input { get; set; }
    private UserAccount? UserAccount { get; set; } = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserName { get; set; }

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private void RegisterUser()
    {
        
    }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || UserName is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;
            statusMessage = $"Error continuing registration";
            return;
        }

        UserAccount = await UserStore.FindByIdAsync(UserId, CancellationToken.None);
        if (UserAccount is null)
        {
            RedirectManager.RedirectTo("");
        }

        var device = SystemState.GetInstance();
        Input = new InputModel { DeviceName = device.Device.DisplayName };
    }

    private sealed class InputModel
    {
        [Required]
        public string DeviceName = default!;
    }
}
