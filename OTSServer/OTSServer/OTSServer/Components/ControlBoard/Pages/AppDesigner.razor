@page "/ControlBoard/AppDesigner"
@rendermode InteractiveServer

@using OTSSDK
@using OTSControls
@using static OTSControls.ItemTreeNode

@inject OTSCommon.Plugins.PluginManager Plugins
@inject IJSRuntime JsRuntime

<div class="designer-base">
    <div class="designer-toolbar">
        <div class="designer-actions">
            <input type="checkbox" checked="@IsPathShown" @onchange="PathShownChanged"/>
            <label for="">Show Paths</label>
            <button @onclick=TestFunc>Test</button>
        </div>
        <div class="designer-options">
            <button @onclick="@(_ => SetConfigMode(ConfigMode.CfgSearch))">Components</button>
            <button @onclick="@(_ => SetConfigMode(ConfigMode.CfgSystem))">System Settings</button>
        </div>
    </div>
    <div class="editor">
        <div class="editor-board">
            <canvas id="design-canvas">

            </canvas>
        </div>
        <div class="config-panel">
            @if (CfgMode == ConfigMode.CfgSystem)
            {
                <div>
                    <span>System</span>
                </div>
            }
            else
            {
                <div>
                    <ItemTree
                        Items="@ComponentTree"
                        OnNodeSelect="OnComponentNodeSelect"
                        TreeName="Component Bank"
                    >
                        
                    </ItemTree>
                </div>
            }
            
        </div>
    </div>
</div>

@code{
    public bool IsPathShown { get; set; } = false;

    public IOTSComponentTemplate<IOTSComponent>? ConfigComponent { get; set; } = null;
    public IJSObjectReference OtsDesignerInterop { get; set; }

    public class ComponentItem : ItemTreeNodeBase
    {

    }

    private async void TestFunc()
    {
        await OtsDesignerInterop.InvokeVoidAsync("showAlert");
    }

    public List<ComponentItem> ComponentTree { get; set; } = [];
    private List<IOTSLibrary> Libraries = [];

    public void LoadComponents()
    {
        ComponentTree = [];
        Libraries = Plugins.Libraries.ToList();

        foreach(var lib in Libraries)
        {
            var libNode = new ComponentItem
            {
                Label = lib.Name,
                NodeId = lib.ID.ToString(),
                Children = []
            };

            foreach(var comp in lib.Components)
            {
                var compNode = new ComponentItem
                {
                    Label = comp.Name,
                    NodeId = comp.ID.ToString(),
                };

                libNode.Children.Add(compNode);
            }

            ComponentTree.Add(libNode);
        }

        Console.WriteLine($"TREE : {ComponentTree.Count()}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OtsDesignerInterop = await JsRuntime.InvokeAsync<IJSObjectReference>("otsdesigner.initAppController");

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        LoadComponents();

        base.OnInitialized();
    }

    public enum ConfigMode
    {
        CfgSearch,
        CfgSystem
    };

    public ConfigMode CfgMode { get; set; } = ConfigMode.CfgSearch;

    public void PathShownChanged()
    {

    }

    public void SetConfigMode(ConfigMode mode)
    {
        CfgMode = mode;
        Console.WriteLine($"Chang mode to {CfgMode}");
    }

    public async void OnComponentNodeSelect(ItemTreeNodeBase item)
    {
        if (item.IsGroup)
        {

        } else
        {
            var componentId = item.NodeId;
            await OtsDesignerInterop.InvokeVoidAsync("addComponent", componentId);
        }

    }
}
